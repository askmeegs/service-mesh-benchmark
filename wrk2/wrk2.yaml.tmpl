apiVersion: v1
kind: Namespace
metadata:
  name: benchmark-load-generator
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-benchmark-load-generator
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  allowedCapabilities:
    # The initContainer for LD2 requires this capability to operate. It is
    # unsafe and *should* be removed.
    - NET_ADMIN
    - NET_RAW
  requiredDropCapabilities:
    - SETPCAP
    - MKNOD
    - AUDIT_WRITE
    - CHOWN
    - DAC_OVERRIDE
    - FOWNER
    - FSETID
    - KILL
    - SETGID
    - SETUID
    - NET_BIND_SERVICE
    - SYS_CHROOT
    - SETFCAP
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
    # The initContainer for LD2 requires running as root to install the
    # iptables rules. This *should* be set.
    # rule: 'MustRunAsNonRoot'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: benchmark-load-generator
  namespace: benchmark-load-generator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: role-psp-benchmark-load-generator
  namespace: benchmark-load-generator
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  resourceNames: ['psp-benchmark-load-generator']
  verbs: ['use']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rb-psp-benchmark-load-generator
  namespace: benchmark-load-generator
roleRef:
  kind: Role
  name: role-psp-benchmark-load-generator
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: benchmark-load-generator
  namespace: benchmark-load-generator
---
apiVersion: batch/v1
kind: Job
metadata:
  name: wrk2
  namespace: benchmark-load-generator
spec:
  template:
    metadata:
      labels:
        app: wrk2
        custom-affinity: benchmark-load-generator
    spec:
      serviceAccountName: benchmark-load-generator
      containers:
      - name: wrk2
        image: ${IMAGE}
        # Wrapper script usage:
        #   Usage: $0 [OPTION...] <URL> -- <wrk2 options>
        #
        #   This script polls URL until a 200 OK HTTP response is received, then runs
        #   wrk2 with the cmdline options provided.
        #
        #   Optional arguments:
        #   -i, --interval <seconds>   default: 2. Sleep time between HTTP
        #                               requests.
        #   -t, --timeout  <seconds>   default: 600. Timeout for polling. After the
        #                               timeout is reached and no HTTP 200 response has
        #                               been received, the script will exit with an
        #                               error.
        #
        # Usage: wrk <options> <url>
        #  Options:
        #    -c, --connections <N>  Connections to keep open
        #    -d, --duration    <T>  Duration of test
        #    -t, --threads     <N>  Number of threads to use
        #    -s, --script      <S>  Load Lua script file
        #    -H, --header      <H>  Add header to request
        #    -L  --latency          Print latency statistics
        #    -U  --u_latency        Print uncorrected latency statistics
        #        --timeout     <T>  Socket/request timeout
        #    -B, --batch_latency    Measure latency of whole
        #                           batches of pipelined ops
        #                           (as opposed to each op)
        #    -v, --version          Print version details
        #    -R, --rate        <T>  work rate (throughput)
        #                           in requests/sec (total)
        #                           [Required Parameter]
        #  Numeric arguments may include a SI unit (1k, 1M, 1G)
        #  Time arguments may include a time unit (2s, 2m, 2h)
        #
        # "benchmark.lua" amends and extends the command line arguments:
        #
        #   wrk -s benchmark.lua <address> <pattern> <nr-of-instances> [<path>] [<path>] ...
        #
        #     address - method and server address (don't supply a PATH here)
        #     pattern - substring of <address> ending in a dash and a number
        #                (e.g. "web-1"). The script will use this to replace
        #                parts of the server address, counting up the number.
        #     nr-of-instances - upper bound for counting (see above)
        #     path - optional paths to query, for each address calculated.
        #
        # Example usage:
        #
        #  wrk -s benchmark.lua http://ex-1.com ex-1 3 index.html php/script.php?p=v
        #
        # will result in these URLs being queried in a random distribution:
        #
        #  http://ex-1.com/index.html
        #  http://ex-1.com/php/script.php?p=v
        #  http://ex-2.com/index.html
        #  http://ex-2.com/php/script.php?p=v
        #  http://ex-3.com/index.html
        #  http://ex-3.com/php/script.php?p=v
        #
        args:
            # wrapper script args
        - -i
        - "1"
        - -s
        - "60"
        - "http://web-svc-1.emojivoto.svc.cluster.local:8080"
        - --
            # wrk args
        - -s
        - /etc/wrk2/multi-server.lua
        - -d
        - ${DURATION}
        - -R
        - "${RATE}"
        - -c
        - "${THREADS}"
        - -t
        - "${THREADS}"
        - --latency
        - --timeout
        - "5000"
        - "http://web-svc-1.emojivoto.svc.cluster.local:8080"
        - "web-svc-1"
        - "${INSTANCES}"
        - "api/list"
        - "api/vote?choice=:flushed:"
        - "api/vote?choice=:policeman:"
        - "api/leaderboard"
        volumeMounts:
        - name: wrk2-config
          mountPath: /etc/wrk2
      restartPolicy: Never
      tolerations:
      - key: "reserved-for-benchmark-load-generator"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        # set this to podAffinity to force load generator and app on the same
        #  node.
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: custom-affinity
                operator: In
                values:
                - emojivoto
            topologyKey: "kubernetes.io/hostname"
            namespaces: ["benchmark-load-generator", "emojivoto"]
      volumes:
      - name: wrk2-config
        configMap:
          name: wrk2-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wrk2-config
  namespace: benchmark-load-generator
data:
  multi-server.lua: |
